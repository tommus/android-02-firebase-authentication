import java.text.SimpleDateFormat

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-beta7'
        classpath "com.google.gms:google-services:3.1.0"
        classpath 'io.fabric.tools:gradle:1.+'
        

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "http://dl.bintray.com/geeksynergy/GeekSupport" }
        maven { url "https://jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    // The following are only a few examples of the types of properties you can define.
    targetSdkVersion = 26
    minSdkVersion = 21
    compileSdkVersion = 26
    buildToolsVersion = "26.0.1"
    // You can also create properties to specify versions for dependencies.
    // Having consistent versions between modules can avoid conflicts with behavior.
    supportLibVersion = "26.0.2"
}

def getAutoVersionName() {
    if (getCurrentBranch().equals("master")) {
        return "${getLastMasterGitTagVersion()}"

    } else {
        return "${getLastMasterGitTagVersion()}-${getGitSha()}(${getGitCommitsCount()})-${getCurrentBranch()}-${getBuildDate()}"
    }
}

def getAutoVersionCode() {
    return getGitCommitsCount().toInteger()
}

def getGitSha() {
    //return "git --git-dir=${rootDir}/../.git --work-tree=${rootDir}/../ rev-parse --short HEAD".execute().text.trim()
    return "git rev-parse --verify --short HEAD".execute().text.trim()
}

def getCurrentBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

def getBuildDate() {
    def df = new SimpleDateFormat("dd.MM.yyyy")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def getGitCommitsCount() {
    return ("git rev-list ${getCurrentBranch()} --count").execute().text.trim();
}

def getLastMasterGitTagVersion() {
    def longVersionName = "git describe --tags master --long".execute().text.replace("v", "").trim()
    def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
    def (versionMajor, versionMinor, versionPatch, versionProject) = fullVersionTag.tokenize('.')

    return sprintf("%s.%s.%s(%s)", [versionMajor, versionMinor, versionPatch, versionProject])
}
